name: Backend CI/CD

on:
  push:
    branches: [ v1 ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci-cd.yml'

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './backend/package-lock.json'

    - name: Install dependencies
      run: |
        npm ci || npm install

    - name: Run tests
      run: |
        npm test
      env:
        CI: true

  deploy:
    needs: test  # This ensures deploy only runs if tests pass
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './backend/package-lock.json'

    - name: Install dependencies
      run: |
        npm ci || npm install

    - name: Prepare deployment package
      run: |
        # Create a production-only package.json
        node -e "const pkg = require('./package.json'); delete pkg.devDependencies; require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2));"
        
        # Install production dependencies only
        npm ci --production || npm install --production
        
        # Remove unnecessary files
        rm -rf tests/ *.test.js .gitignore

    - name: Zip artifact
      run: |
        zip -r ../deployment-package.zip ./*

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy to Lambda
      run: |
        aws lambda update-function-code \
          --function-name ${{ secrets.LAMBDA_FUNCTION_NAME }} \
          --zip-file fileb://../deployment-package.zip

    - name: Wait for Lambda update
      run: |
        aws lambda wait function-updated \
          --function-name ${{ secrets.LAMBDA_FUNCTION_NAME }}

    - name: Update Lambda function configuration
      run: |
        aws lambda update-function-configuration \
          --function-name ${{ secrets.LAMBDA_FUNCTION_NAME }} \
          --handler index.handler \
          --runtime nodejs18.x