openapi: 3.0.0
info:
  title: Asset Finance Management Platform
  version: 1.0.0
servers:
  - url: https://py7hbtq3ha76yu77qnaapqx6qy0jntaz.lambda-url.ap-southeast-2.on.aws/
    description: Development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    User:
      type: object
      required:
        - email
        - password
      properties:
        name:
          type: string
          example: "Karan Surana"
        email:
          type: string
          format: email
          example: "karan@example.com"
        password:
          type: string
          format: password
          example: "secretpassword123"

    Application:
      type: object
      required:
        - personalDetails
        - financialDetails
      properties:
        personalDetails:
          type: object
          properties:
            name:
              type: string
              example: "Karan Surana"
            address:
              type: string
              example: "123 Main St, City"
            phone:
              type: string
              example: "234568900"
        financialDetails:
          type: object
          properties:
            income:
              type: number
              example: 75000
            expenses:
              type: number
              example: 25000
            assets:
              type: string
              example: "House, Car"
            liabilities:
              type: string
              example: "Mortgage, Car Loan"

paths:
  /health:
    get:
      summary: Health check endpoint
      description: Returns the status of the API
      responses:
        '200':
          description: Server is working
          content:
            text/plain:
              schema:
                type: string
                example: "Working"

  /user/register:
    post:
      summary: Register a new user
      description: Create a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User created successfully"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Email and password are required"

  /user/login:
    post:
      summary: User login
      description: Authenticate a user and receive a JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid credentials"

  /applications:
    get:
      summary: Get all applications
      description: Retrieve all applications for the authenticated user
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of applications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Application'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

    post:
      summary: Create new application
      description: Create a new application for the authenticated user
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Application'
      responses:
        '201':
          description: Application created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /applications/{id}:
    put:
      summary: Update application
      description: Update an existing application
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Application ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Application'
      responses:
        '200':
          description: Application updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
        '404':
          description: Application not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Application not found"

    delete:
      summary: Delete application
      description: Delete an existing application
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Application ID
      responses:
        '200':
          description: Application deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Application deleted successfully"
        '404':
          description: Application not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Application not found"